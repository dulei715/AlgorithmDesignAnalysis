% !Mode:: "TeX:UTF-8"

\chapter{}
\textbf{
Recall the problem of finding the number of inversions. As in the text, we are given a sequence of $n$ numbers $a_1,...,a_n$, which we assume are all distinct, and we define an inversion to be a pair $i<j$ such that $a_i>a_j$.
}

\textbf{
We motivated the problem of counting inversions as a good measure of how different two ordering are. However, one might feel that this measure is too sensitive. Let's call a pair a \emph{significant inversion} if $i<j$ and $a_i>2a_j$. Give an $O(n log n)$ algorithm to count the number of significant inversions between two orderings.
}
\hspace*{\fill} \\

It's similar as the algorithm of finding the number of inversions expect that we need two pointers in the left array, which point to the current element of the left array and the least number that greater than twice of the current element of the right array. Consider the following example. There are two arrays, they are array A and array B. Suppose Both of the two arrays have been sorted and counted about the inversion number satisfying $i<j$ and $a_i>a_j$(we call this \emph{twice inversion}), we now need to merge A and B as well as count the twice inversion between A and B.

\begin{table}[H]
\caption{Array A}
\label{ArrayA1}
\centering
\scalebox{0.6}{
\begin{tabular}{|c|c|c|c|c|c|}
\hline
1 & 3 & 6 & 19 & 24 & 38 \\ \hline
\end{tabular}
}
\end{table}

\begin{table}[H]
\caption{Array B}
\label{ArrayB1s}
\centering
\scalebox{0.6}{
\begin{tabular}{|c|c|c|c|c|c|c|}
\hline
2 & 4 & 5 & 10 & 16 & 32 & 40 \\ \hline
\end{tabular}
}
\end{table}